AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Workshop Module 4 - Asynchronous Pattern with EventBridge
  and SQS
Parameters:
  UserPool:
    Type: String
    Description: User Pool Id from Module 2
  Service:
    Type: String
    Default: userprofile
  Stage:
    Type: String
    Default: prod
Globals:
  Function:
    Timeout: 20
    Tracing: Active
    Layers:
    - Fn::Sub: arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPython:20
  Api:
    TracingEnabled: true
Resources:
  UserAddressesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}-AddressTable
      AttributeDefinitions:
      - AttributeName: user_id
        AttributeType: S
      - AttributeName: address_id
        AttributeType: S
      KeySchema:
      - AttributeName: user_id
        KeyType: HASH
      - AttributeName: address_id
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  AddressBus:
    Type: AWS::Events::EventBus
    Properties:
      Name:
        Fn::Sub: Address-${AWS::StackName}
  AddUserAddressFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: AddUserAddressFunction
      Handler: add_user_address.lambda_handler
      Runtime: python3.9
      Tracing: Active
      Policies:
        DynamoDBCrudPolicy:
          TableName:
            Ref: UserAddressesTable
      Environment:
        Variables:
          TABLE_NAME:
            Ref: UserAddressesTable
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            EventBusName:
              Ref: AddressBus
            Pattern:
              source:
              - customer-profile
              detail-type:
              - address.added
    Metadata:
      SamResourceId: AddUserAddressFunction
  EditUserAddressFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: EditUserAddressFunction
      Handler: edit_user_address.lambda_handler
      Runtime: python3.9
      Tracing: Active
      Policies:
        DynamoDBCrudPolicy:
          TableName:
            Ref: UserAddressesTable
      Environment:
        Variables:
          TABLE_NAME:
            Ref: UserAddressesTable
          POWERTOOLS_SERVICE_NAME: serverless-workshop
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            EventBusName:
              Ref: AddressBus
            Pattern:
              source:
              - customer-profile
              detail-type:
              - address.updated
    Metadata:
      SamResourceId: EditUserAddressFunction
  DeleteUserAddressFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DeleteUserAddressFunction
      Handler: delete_user_address.lambda_handler
      Runtime: python3.9
      Tracing: Active
      Policies:
        DynamoDBCrudPolicy:
          TableName:
            Ref: UserAddressesTable
      Environment:
        Variables:
          TABLE_NAME:
            Ref: UserAddressesTable
          POWERTOOLS_SERVICE_NAME: serverless-workshop
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            EventBusName:
              Ref: AddressBus
            Pattern:
              source:
              - customer-profile
              detail-type:
              - address.deleted
    Metadata:
      SamResourceId: DeleteUserAddressFunction
  ApiGatewayEventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      Path:
        Fn::Join:
        - ''
        - - /
          - Ref: AWS::StackName
          - /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowApiGatewayServiceToAssumeRole
          Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - apigateway.amazonaws.com
      Policies:
      - PolicyName: EBPutEvents
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - events:PutEvents
            Resource:
            - Fn::GetAtt:
              - AddressBus
              - Arn
  ProfileApiGateway:
    Type: AWS::Serverless::Api
    DependsOn:
    - ApiGatewayEventBridgeRole
    Properties:
      StageName:
        Ref: Stage
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn:
              Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
      EndpointConfiguration:
        Type: REGIONAL
      TracingEnabled: true
      MethodSettings:
      - LoggingLevel: INFO
        ResourcePath: /*
        HttpMethod: '*'
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ../../api.yaml
  ListUserAddressesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ListUserAddressesFunction
      Handler: list_user_addresses.lambda_handler
      Runtime: python3.9
      Policies:
        DynamoDBReadPolicy:
          TableName:
            Ref: UserAddressesTable
      Environment:
        Variables:
          TABLE_NAME:
            Ref: UserAddressesTable
    Metadata:
      SamResourceId: ListUserAddressesFunction
  ListUserAddressesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ListUserAddressesFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ProfileApiGateway}/*/GET/address
  FavoriteRestaurantsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Sub: FavoriteRestaurants-${AWS::StackName}
  FavoriteRestaurantsQueuePolicySQS:
    Properties:
      PolicyDocument:
        Statement:
        - Action: SQS:*
          Effect: Allow
          Principal:
            AWS:
              Ref: AWS::AccountId
          Resource:
            Fn::GetAtt:
            - FavoriteRestaurantsQueue
            - Arn
        - Action: SQS:SendMessage
          Effect: Allow
          Principal:
            AWS:
              Fn::GetAtt:
              - APIGatewayQueueCommandRole
              - Arn
          Resource:
            Fn::GetAtt:
            - FavoriteRestaurantsQueue
            - Arn
        Version: '2012-10-17'
      Queues:
      - Ref: FavoriteRestaurantsQueue
    Type: AWS::SQS::QueuePolicy
  APIGatewayQueueCommandRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
      - PolicyDocument:
          Statement:
          - Action: sqs:SendMessage
            Effect: Allow
            Resource:
              Fn::GetAtt:
              - FavoriteRestaurantsQueue
              - Arn
          Version: '2012-10-17'
        PolicyName: PolicySQS
  ListUserFavoritesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ListUserFavoritesFunction
      Handler: list_user_favorites.lambda_handler
      Runtime: python3.9
      Policies:
        DynamoDBReadPolicy:
          TableName:
            Ref: FavoritesTable
      Environment:
        Variables:
          TABLE_NAME:
            Ref: FavoritesTable
          POWERTOOLS_SERVICE_NAME: serverless-workshop
    Metadata:
      SamResourceId: ListUserFavoritesFunction
  ListUserFavoritesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ListUserFavoritesFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ProfileApiGateway}/*/GET/favorite
  FavoritesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: user_id
        AttributeType: S
      - AttributeName: restaurant_id
        AttributeType: S
      KeySchema:
      - AttributeName: user_id
        KeyType: HASH
      - AttributeName: restaurant_id
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  ProcessFavoriteRestaurantsQueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ProcessFavoriteRestaurantsQueueFunction
      Handler: process_favorites_queue.lambda_handler
      Runtime: python3.9
      Policies:
        DynamoDBCrudPolicy:
          TableName: '*'
      Environment:
        Variables:
          TABLE_NAME:
            Ref: FavoritesTable
          POWERTOOLS_SERVICE_NAME: serverless-workshop
      Events:
        Trigger:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - FavoriteRestaurantsQueue
              - Arn
    Metadata:
      SamResourceId: ProcessFavoriteRestaurantsQueueFunction
Outputs:
  AddressBus:
    Description: Address Event Bus
    Value:
      Ref: AddressBus
  AddressTable:
    Description: DynamoDB User Address Table
    Value:
      Ref: UserAddressesTable
  ProfileApiEndpoint:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${ProfileApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/
  FavoriteSQSUrl:
    Description: URL of the Favorite SQS Queue
    Value:
      Ref: FavoriteRestaurantsQueue
  FavoriteTable:
    Description: DynamoDB User Favorites Table
    Value:
      Ref: FavoritesTable
